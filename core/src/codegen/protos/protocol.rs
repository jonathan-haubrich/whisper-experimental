// @generated
// This file is @generated by prost-build.
/// Common header
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Header {
    #[prost(enumeration="Type", tag="1")]
    pub r#type: i32,
    #[prost(uint64, tag="2")]
    pub len: u64,
}
/// Represents a load message with variable length bytes
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Load {
    #[prost(bytes="vec", tag="1")]
    pub data: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LoadResponse {
    #[prost(uint32, tag="1")]
    pub module_id: u32,
}
/// A command with a module ID, command ID, and payload
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Command {
    #[prost(uint64, tag="1")]
    pub module_id: u64,
    #[prost(uint64, tag="2")]
    pub id: u64,
    #[prost(bytes="vec", tag="3")]
    pub data: ::prost::alloc::vec::Vec<u8>,
}
/// A response with data
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Response {
    #[prost(bytes="vec", tag="1")]
    pub data: ::prost::alloc::vec::Vec<u8>,
}
/// A top-level message that can be one of Load or Command
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Protocol {
    #[prost(oneof="protocol::Msg", tags="1, 2, 3, 4")]
    pub msg: ::core::option::Option<protocol::Msg>,
}
/// Nested message and enum types in `Protocol`.
pub mod protocol {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Msg {
        #[prost(message, tag="1")]
        Load(super::Load),
        #[prost(message, tag="2")]
        Command(super::Command),
        #[prost(message, tag="3")]
        Response(super::Response),
        #[prost(message, tag="4")]
        LoadResponse(super::LoadResponse),
    }
}
/// Mapping from Rust enum Type
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Type {
    /// Default fallback
    Invalid = 0,
    Load = 1,
    Command = 2,
    Response = 3,
    LoadResponse = 4,
}
impl Type {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Invalid => "TYPE_INVALID",
            Self::Load => "TYPE_LOAD",
            Self::Command => "TYPE_COMMAND",
            Self::Response => "TYPE_RESPONSE",
            Self::LoadResponse => "TYPE_LOAD_RESPONSE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TYPE_INVALID" => Some(Self::Invalid),
            "TYPE_LOAD" => Some(Self::Load),
            "TYPE_COMMAND" => Some(Self::Command),
            "TYPE_RESPONSE" => Some(Self::Response),
            "TYPE_LOAD_RESPONSE" => Some(Self::LoadResponse),
            _ => None,
        }
    }
}
// @@protoc_insertion_point(module)
